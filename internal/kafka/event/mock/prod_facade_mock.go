// Code generated by http://github.com/gojuno/minimock (v3.4.0). DO NOT EDIT.

package mock

//go:generate minimock -i github.com/Na322Pr/route256/internal/kafka/event.ProdFacade -o prod_facade_mock.go -n ProdFacadeMock -p mock

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/IBM/sarama"
	"github.com/gojuno/minimock/v3"
)

// ProdFacadeMock implements mm_event.ProdFacade
type ProdFacadeMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcSendMessage          func(msg *sarama.ProducerMessage) (partition int32, offset int64, err error)
	funcSendMessageOrigin    string
	inspectFuncSendMessage   func(msg *sarama.ProducerMessage)
	afterSendMessageCounter  uint64
	beforeSendMessageCounter uint64
	SendMessageMock          mProdFacadeMockSendMessage
}

// NewProdFacadeMock returns a mock for mm_event.ProdFacade
func NewProdFacadeMock(t minimock.Tester) *ProdFacadeMock {
	m := &ProdFacadeMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.SendMessageMock = mProdFacadeMockSendMessage{mock: m}
	m.SendMessageMock.callArgs = []*ProdFacadeMockSendMessageParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mProdFacadeMockSendMessage struct {
	optional           bool
	mock               *ProdFacadeMock
	defaultExpectation *ProdFacadeMockSendMessageExpectation
	expectations       []*ProdFacadeMockSendMessageExpectation

	callArgs []*ProdFacadeMockSendMessageParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ProdFacadeMockSendMessageExpectation specifies expectation struct of the ProdFacade.SendMessage
type ProdFacadeMockSendMessageExpectation struct {
	mock               *ProdFacadeMock
	params             *ProdFacadeMockSendMessageParams
	paramPtrs          *ProdFacadeMockSendMessageParamPtrs
	expectationOrigins ProdFacadeMockSendMessageExpectationOrigins
	results            *ProdFacadeMockSendMessageResults
	returnOrigin       string
	Counter            uint64
}

// ProdFacadeMockSendMessageParams contains parameters of the ProdFacade.SendMessage
type ProdFacadeMockSendMessageParams struct {
	msg *sarama.ProducerMessage
}

// ProdFacadeMockSendMessageParamPtrs contains pointers to parameters of the ProdFacade.SendMessage
type ProdFacadeMockSendMessageParamPtrs struct {
	msg **sarama.ProducerMessage
}

// ProdFacadeMockSendMessageResults contains results of the ProdFacade.SendMessage
type ProdFacadeMockSendMessageResults struct {
	partition int32
	offset    int64
	err       error
}

// ProdFacadeMockSendMessageOrigins contains origins of expectations of the ProdFacade.SendMessage
type ProdFacadeMockSendMessageExpectationOrigins struct {
	origin    string
	originMsg string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmSendMessage *mProdFacadeMockSendMessage) Optional() *mProdFacadeMockSendMessage {
	mmSendMessage.optional = true
	return mmSendMessage
}

// Expect sets up expected params for ProdFacade.SendMessage
func (mmSendMessage *mProdFacadeMockSendMessage) Expect(msg *sarama.ProducerMessage) *mProdFacadeMockSendMessage {
	if mmSendMessage.mock.funcSendMessage != nil {
		mmSendMessage.mock.t.Fatalf("ProdFacadeMock.SendMessage mock is already set by Set")
	}

	if mmSendMessage.defaultExpectation == nil {
		mmSendMessage.defaultExpectation = &ProdFacadeMockSendMessageExpectation{}
	}

	if mmSendMessage.defaultExpectation.paramPtrs != nil {
		mmSendMessage.mock.t.Fatalf("ProdFacadeMock.SendMessage mock is already set by ExpectParams functions")
	}

	mmSendMessage.defaultExpectation.params = &ProdFacadeMockSendMessageParams{msg}
	mmSendMessage.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmSendMessage.expectations {
		if minimock.Equal(e.params, mmSendMessage.defaultExpectation.params) {
			mmSendMessage.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSendMessage.defaultExpectation.params)
		}
	}

	return mmSendMessage
}

// ExpectMsgParam1 sets up expected param msg for ProdFacade.SendMessage
func (mmSendMessage *mProdFacadeMockSendMessage) ExpectMsgParam1(msg *sarama.ProducerMessage) *mProdFacadeMockSendMessage {
	if mmSendMessage.mock.funcSendMessage != nil {
		mmSendMessage.mock.t.Fatalf("ProdFacadeMock.SendMessage mock is already set by Set")
	}

	if mmSendMessage.defaultExpectation == nil {
		mmSendMessage.defaultExpectation = &ProdFacadeMockSendMessageExpectation{}
	}

	if mmSendMessage.defaultExpectation.params != nil {
		mmSendMessage.mock.t.Fatalf("ProdFacadeMock.SendMessage mock is already set by Expect")
	}

	if mmSendMessage.defaultExpectation.paramPtrs == nil {
		mmSendMessage.defaultExpectation.paramPtrs = &ProdFacadeMockSendMessageParamPtrs{}
	}
	mmSendMessage.defaultExpectation.paramPtrs.msg = &msg
	mmSendMessage.defaultExpectation.expectationOrigins.originMsg = minimock.CallerInfo(1)

	return mmSendMessage
}

// Inspect accepts an inspector function that has same arguments as the ProdFacade.SendMessage
func (mmSendMessage *mProdFacadeMockSendMessage) Inspect(f func(msg *sarama.ProducerMessage)) *mProdFacadeMockSendMessage {
	if mmSendMessage.mock.inspectFuncSendMessage != nil {
		mmSendMessage.mock.t.Fatalf("Inspect function is already set for ProdFacadeMock.SendMessage")
	}

	mmSendMessage.mock.inspectFuncSendMessage = f

	return mmSendMessage
}

// Return sets up results that will be returned by ProdFacade.SendMessage
func (mmSendMessage *mProdFacadeMockSendMessage) Return(partition int32, offset int64, err error) *ProdFacadeMock {
	if mmSendMessage.mock.funcSendMessage != nil {
		mmSendMessage.mock.t.Fatalf("ProdFacadeMock.SendMessage mock is already set by Set")
	}

	if mmSendMessage.defaultExpectation == nil {
		mmSendMessage.defaultExpectation = &ProdFacadeMockSendMessageExpectation{mock: mmSendMessage.mock}
	}
	mmSendMessage.defaultExpectation.results = &ProdFacadeMockSendMessageResults{partition, offset, err}
	mmSendMessage.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmSendMessage.mock
}

// Set uses given function f to mock the ProdFacade.SendMessage method
func (mmSendMessage *mProdFacadeMockSendMessage) Set(f func(msg *sarama.ProducerMessage) (partition int32, offset int64, err error)) *ProdFacadeMock {
	if mmSendMessage.defaultExpectation != nil {
		mmSendMessage.mock.t.Fatalf("Default expectation is already set for the ProdFacade.SendMessage method")
	}

	if len(mmSendMessage.expectations) > 0 {
		mmSendMessage.mock.t.Fatalf("Some expectations are already set for the ProdFacade.SendMessage method")
	}

	mmSendMessage.mock.funcSendMessage = f
	mmSendMessage.mock.funcSendMessageOrigin = minimock.CallerInfo(1)
	return mmSendMessage.mock
}

// When sets expectation for the ProdFacade.SendMessage which will trigger the result defined by the following
// Then helper
func (mmSendMessage *mProdFacadeMockSendMessage) When(msg *sarama.ProducerMessage) *ProdFacadeMockSendMessageExpectation {
	if mmSendMessage.mock.funcSendMessage != nil {
		mmSendMessage.mock.t.Fatalf("ProdFacadeMock.SendMessage mock is already set by Set")
	}

	expectation := &ProdFacadeMockSendMessageExpectation{
		mock:               mmSendMessage.mock,
		params:             &ProdFacadeMockSendMessageParams{msg},
		expectationOrigins: ProdFacadeMockSendMessageExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmSendMessage.expectations = append(mmSendMessage.expectations, expectation)
	return expectation
}

// Then sets up ProdFacade.SendMessage return parameters for the expectation previously defined by the When method
func (e *ProdFacadeMockSendMessageExpectation) Then(partition int32, offset int64, err error) *ProdFacadeMock {
	e.results = &ProdFacadeMockSendMessageResults{partition, offset, err}
	return e.mock
}

// Times sets number of times ProdFacade.SendMessage should be invoked
func (mmSendMessage *mProdFacadeMockSendMessage) Times(n uint64) *mProdFacadeMockSendMessage {
	if n == 0 {
		mmSendMessage.mock.t.Fatalf("Times of ProdFacadeMock.SendMessage mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmSendMessage.expectedInvocations, n)
	mmSendMessage.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmSendMessage
}

func (mmSendMessage *mProdFacadeMockSendMessage) invocationsDone() bool {
	if len(mmSendMessage.expectations) == 0 && mmSendMessage.defaultExpectation == nil && mmSendMessage.mock.funcSendMessage == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmSendMessage.mock.afterSendMessageCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmSendMessage.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// SendMessage implements mm_event.ProdFacade
func (mmSendMessage *ProdFacadeMock) SendMessage(msg *sarama.ProducerMessage) (partition int32, offset int64, err error) {
	mm_atomic.AddUint64(&mmSendMessage.beforeSendMessageCounter, 1)
	defer mm_atomic.AddUint64(&mmSendMessage.afterSendMessageCounter, 1)

	mmSendMessage.t.Helper()

	if mmSendMessage.inspectFuncSendMessage != nil {
		mmSendMessage.inspectFuncSendMessage(msg)
	}

	mm_params := ProdFacadeMockSendMessageParams{msg}

	// Record call args
	mmSendMessage.SendMessageMock.mutex.Lock()
	mmSendMessage.SendMessageMock.callArgs = append(mmSendMessage.SendMessageMock.callArgs, &mm_params)
	mmSendMessage.SendMessageMock.mutex.Unlock()

	for _, e := range mmSendMessage.SendMessageMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.partition, e.results.offset, e.results.err
		}
	}

	if mmSendMessage.SendMessageMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSendMessage.SendMessageMock.defaultExpectation.Counter, 1)
		mm_want := mmSendMessage.SendMessageMock.defaultExpectation.params
		mm_want_ptrs := mmSendMessage.SendMessageMock.defaultExpectation.paramPtrs

		mm_got := ProdFacadeMockSendMessageParams{msg}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.msg != nil && !minimock.Equal(*mm_want_ptrs.msg, mm_got.msg) {
				mmSendMessage.t.Errorf("ProdFacadeMock.SendMessage got unexpected parameter msg, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSendMessage.SendMessageMock.defaultExpectation.expectationOrigins.originMsg, *mm_want_ptrs.msg, mm_got.msg, minimock.Diff(*mm_want_ptrs.msg, mm_got.msg))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSendMessage.t.Errorf("ProdFacadeMock.SendMessage got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmSendMessage.SendMessageMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSendMessage.SendMessageMock.defaultExpectation.results
		if mm_results == nil {
			mmSendMessage.t.Fatal("No results are set for the ProdFacadeMock.SendMessage")
		}
		return (*mm_results).partition, (*mm_results).offset, (*mm_results).err
	}
	if mmSendMessage.funcSendMessage != nil {
		return mmSendMessage.funcSendMessage(msg)
	}
	mmSendMessage.t.Fatalf("Unexpected call to ProdFacadeMock.SendMessage. %v", msg)
	return
}

// SendMessageAfterCounter returns a count of finished ProdFacadeMock.SendMessage invocations
func (mmSendMessage *ProdFacadeMock) SendMessageAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSendMessage.afterSendMessageCounter)
}

// SendMessageBeforeCounter returns a count of ProdFacadeMock.SendMessage invocations
func (mmSendMessage *ProdFacadeMock) SendMessageBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSendMessage.beforeSendMessageCounter)
}

// Calls returns a list of arguments used in each call to ProdFacadeMock.SendMessage.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSendMessage *mProdFacadeMockSendMessage) Calls() []*ProdFacadeMockSendMessageParams {
	mmSendMessage.mutex.RLock()

	argCopy := make([]*ProdFacadeMockSendMessageParams, len(mmSendMessage.callArgs))
	copy(argCopy, mmSendMessage.callArgs)

	mmSendMessage.mutex.RUnlock()

	return argCopy
}

// MinimockSendMessageDone returns true if the count of the SendMessage invocations corresponds
// the number of defined expectations
func (m *ProdFacadeMock) MinimockSendMessageDone() bool {
	if m.SendMessageMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.SendMessageMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.SendMessageMock.invocationsDone()
}

// MinimockSendMessageInspect logs each unmet expectation
func (m *ProdFacadeMock) MinimockSendMessageInspect() {
	for _, e := range m.SendMessageMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ProdFacadeMock.SendMessage at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterSendMessageCounter := mm_atomic.LoadUint64(&m.afterSendMessageCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.SendMessageMock.defaultExpectation != nil && afterSendMessageCounter < 1 {
		if m.SendMessageMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ProdFacadeMock.SendMessage at\n%s", m.SendMessageMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ProdFacadeMock.SendMessage at\n%s with params: %#v", m.SendMessageMock.defaultExpectation.expectationOrigins.origin, *m.SendMessageMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSendMessage != nil && afterSendMessageCounter < 1 {
		m.t.Errorf("Expected call to ProdFacadeMock.SendMessage at\n%s", m.funcSendMessageOrigin)
	}

	if !m.SendMessageMock.invocationsDone() && afterSendMessageCounter > 0 {
		m.t.Errorf("Expected %d calls to ProdFacadeMock.SendMessage at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.SendMessageMock.expectedInvocations), m.SendMessageMock.expectedInvocationsOrigin, afterSendMessageCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ProdFacadeMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockSendMessageInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ProdFacadeMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ProdFacadeMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockSendMessageDone()
}
