// Code generated by http://github.com/gojuno/minimock (v3.4.0). DO NOT EDIT.

package mock

//go:generate minimock -i gitlab.ozon.dev/marchenkosasha2/homework/internal/usecase.EventLogProducerFacade -o event_log_producer_facade_mock.go -n EventLogProducerFacadeMock -p mock

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"gitlab.ozon.dev/marchenkosasha2/homework/internal/dto"
	"gitlab.ozon.dev/marchenkosasha2/homework/internal/kafka/event"
)

// EventLogProducerFacadeMock implements mm_usecase.EventLogProducerFacade
type EventLogProducerFacadeMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcProduceEvent          func(order dto.OrderDTO, eventType event.EventType) (err error)
	funcProduceEventOrigin    string
	inspectFuncProduceEvent   func(order dto.OrderDTO, eventType event.EventType)
	afterProduceEventCounter  uint64
	beforeProduceEventCounter uint64
	ProduceEventMock          mEventLogProducerFacadeMockProduceEvent
}

// NewEventLogProducerFacadeMock returns a mock for mm_usecase.EventLogProducerFacade
func NewEventLogProducerFacadeMock(t minimock.Tester) *EventLogProducerFacadeMock {
	m := &EventLogProducerFacadeMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.ProduceEventMock = mEventLogProducerFacadeMockProduceEvent{mock: m}
	m.ProduceEventMock.callArgs = []*EventLogProducerFacadeMockProduceEventParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mEventLogProducerFacadeMockProduceEvent struct {
	optional           bool
	mock               *EventLogProducerFacadeMock
	defaultExpectation *EventLogProducerFacadeMockProduceEventExpectation
	expectations       []*EventLogProducerFacadeMockProduceEventExpectation

	callArgs []*EventLogProducerFacadeMockProduceEventParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// EventLogProducerFacadeMockProduceEventExpectation specifies expectation struct of the EventLogProducerFacade.ProduceEvent
type EventLogProducerFacadeMockProduceEventExpectation struct {
	mock               *EventLogProducerFacadeMock
	params             *EventLogProducerFacadeMockProduceEventParams
	paramPtrs          *EventLogProducerFacadeMockProduceEventParamPtrs
	expectationOrigins EventLogProducerFacadeMockProduceEventExpectationOrigins
	results            *EventLogProducerFacadeMockProduceEventResults
	returnOrigin       string
	Counter            uint64
}

// EventLogProducerFacadeMockProduceEventParams contains parameters of the EventLogProducerFacade.ProduceEvent
type EventLogProducerFacadeMockProduceEventParams struct {
	order     dto.OrderDTO
	eventType event.EventType
}

// EventLogProducerFacadeMockProduceEventParamPtrs contains pointers to parameters of the EventLogProducerFacade.ProduceEvent
type EventLogProducerFacadeMockProduceEventParamPtrs struct {
	order     *dto.OrderDTO
	eventType *event.EventType
}

// EventLogProducerFacadeMockProduceEventResults contains results of the EventLogProducerFacade.ProduceEvent
type EventLogProducerFacadeMockProduceEventResults struct {
	err error
}

// EventLogProducerFacadeMockProduceEventOrigins contains origins of expectations of the EventLogProducerFacade.ProduceEvent
type EventLogProducerFacadeMockProduceEventExpectationOrigins struct {
	origin          string
	originOrder     string
	originEventType string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmProduceEvent *mEventLogProducerFacadeMockProduceEvent) Optional() *mEventLogProducerFacadeMockProduceEvent {
	mmProduceEvent.optional = true
	return mmProduceEvent
}

// Expect sets up expected params for EventLogProducerFacade.ProduceEvent
func (mmProduceEvent *mEventLogProducerFacadeMockProduceEvent) Expect(order dto.OrderDTO, eventType event.EventType) *mEventLogProducerFacadeMockProduceEvent {
	if mmProduceEvent.mock.funcProduceEvent != nil {
		mmProduceEvent.mock.t.Fatalf("EventLogProducerFacadeMock.ProduceEvent mock is already set by Set")
	}

	if mmProduceEvent.defaultExpectation == nil {
		mmProduceEvent.defaultExpectation = &EventLogProducerFacadeMockProduceEventExpectation{}
	}

	if mmProduceEvent.defaultExpectation.paramPtrs != nil {
		mmProduceEvent.mock.t.Fatalf("EventLogProducerFacadeMock.ProduceEvent mock is already set by ExpectParams functions")
	}

	mmProduceEvent.defaultExpectation.params = &EventLogProducerFacadeMockProduceEventParams{order, eventType}
	mmProduceEvent.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmProduceEvent.expectations {
		if minimock.Equal(e.params, mmProduceEvent.defaultExpectation.params) {
			mmProduceEvent.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmProduceEvent.defaultExpectation.params)
		}
	}

	return mmProduceEvent
}

// ExpectOrderParam1 sets up expected param order for EventLogProducerFacade.ProduceEvent
func (mmProduceEvent *mEventLogProducerFacadeMockProduceEvent) ExpectOrderParam1(order dto.OrderDTO) *mEventLogProducerFacadeMockProduceEvent {
	if mmProduceEvent.mock.funcProduceEvent != nil {
		mmProduceEvent.mock.t.Fatalf("EventLogProducerFacadeMock.ProduceEvent mock is already set by Set")
	}

	if mmProduceEvent.defaultExpectation == nil {
		mmProduceEvent.defaultExpectation = &EventLogProducerFacadeMockProduceEventExpectation{}
	}

	if mmProduceEvent.defaultExpectation.params != nil {
		mmProduceEvent.mock.t.Fatalf("EventLogProducerFacadeMock.ProduceEvent mock is already set by Expect")
	}

	if mmProduceEvent.defaultExpectation.paramPtrs == nil {
		mmProduceEvent.defaultExpectation.paramPtrs = &EventLogProducerFacadeMockProduceEventParamPtrs{}
	}
	mmProduceEvent.defaultExpectation.paramPtrs.order = &order
	mmProduceEvent.defaultExpectation.expectationOrigins.originOrder = minimock.CallerInfo(1)

	return mmProduceEvent
}

// ExpectEventTypeParam2 sets up expected param eventType for EventLogProducerFacade.ProduceEvent
func (mmProduceEvent *mEventLogProducerFacadeMockProduceEvent) ExpectEventTypeParam2(eventType event.EventType) *mEventLogProducerFacadeMockProduceEvent {
	if mmProduceEvent.mock.funcProduceEvent != nil {
		mmProduceEvent.mock.t.Fatalf("EventLogProducerFacadeMock.ProduceEvent mock is already set by Set")
	}

	if mmProduceEvent.defaultExpectation == nil {
		mmProduceEvent.defaultExpectation = &EventLogProducerFacadeMockProduceEventExpectation{}
	}

	if mmProduceEvent.defaultExpectation.params != nil {
		mmProduceEvent.mock.t.Fatalf("EventLogProducerFacadeMock.ProduceEvent mock is already set by Expect")
	}

	if mmProduceEvent.defaultExpectation.paramPtrs == nil {
		mmProduceEvent.defaultExpectation.paramPtrs = &EventLogProducerFacadeMockProduceEventParamPtrs{}
	}
	mmProduceEvent.defaultExpectation.paramPtrs.eventType = &eventType
	mmProduceEvent.defaultExpectation.expectationOrigins.originEventType = minimock.CallerInfo(1)

	return mmProduceEvent
}

// Inspect accepts an inspector function that has same arguments as the EventLogProducerFacade.ProduceEvent
func (mmProduceEvent *mEventLogProducerFacadeMockProduceEvent) Inspect(f func(order dto.OrderDTO, eventType event.EventType)) *mEventLogProducerFacadeMockProduceEvent {
	if mmProduceEvent.mock.inspectFuncProduceEvent != nil {
		mmProduceEvent.mock.t.Fatalf("Inspect function is already set for EventLogProducerFacadeMock.ProduceEvent")
	}

	mmProduceEvent.mock.inspectFuncProduceEvent = f

	return mmProduceEvent
}

// Return sets up results that will be returned by EventLogProducerFacade.ProduceEvent
func (mmProduceEvent *mEventLogProducerFacadeMockProduceEvent) Return(err error) *EventLogProducerFacadeMock {
	if mmProduceEvent.mock.funcProduceEvent != nil {
		mmProduceEvent.mock.t.Fatalf("EventLogProducerFacadeMock.ProduceEvent mock is already set by Set")
	}

	if mmProduceEvent.defaultExpectation == nil {
		mmProduceEvent.defaultExpectation = &EventLogProducerFacadeMockProduceEventExpectation{mock: mmProduceEvent.mock}
	}
	mmProduceEvent.defaultExpectation.results = &EventLogProducerFacadeMockProduceEventResults{err}
	mmProduceEvent.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmProduceEvent.mock
}

// Set uses given function f to mock the EventLogProducerFacade.ProduceEvent method
func (mmProduceEvent *mEventLogProducerFacadeMockProduceEvent) Set(f func(order dto.OrderDTO, eventType event.EventType) (err error)) *EventLogProducerFacadeMock {
	if mmProduceEvent.defaultExpectation != nil {
		mmProduceEvent.mock.t.Fatalf("Default expectation is already set for the EventLogProducerFacade.ProduceEvent method")
	}

	if len(mmProduceEvent.expectations) > 0 {
		mmProduceEvent.mock.t.Fatalf("Some expectations are already set for the EventLogProducerFacade.ProduceEvent method")
	}

	mmProduceEvent.mock.funcProduceEvent = f
	mmProduceEvent.mock.funcProduceEventOrigin = minimock.CallerInfo(1)
	return mmProduceEvent.mock
}

// When sets expectation for the EventLogProducerFacade.ProduceEvent which will trigger the result defined by the following
// Then helper
func (mmProduceEvent *mEventLogProducerFacadeMockProduceEvent) When(order dto.OrderDTO, eventType event.EventType) *EventLogProducerFacadeMockProduceEventExpectation {
	if mmProduceEvent.mock.funcProduceEvent != nil {
		mmProduceEvent.mock.t.Fatalf("EventLogProducerFacadeMock.ProduceEvent mock is already set by Set")
	}

	expectation := &EventLogProducerFacadeMockProduceEventExpectation{
		mock:               mmProduceEvent.mock,
		params:             &EventLogProducerFacadeMockProduceEventParams{order, eventType},
		expectationOrigins: EventLogProducerFacadeMockProduceEventExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmProduceEvent.expectations = append(mmProduceEvent.expectations, expectation)
	return expectation
}

// Then sets up EventLogProducerFacade.ProduceEvent return parameters for the expectation previously defined by the When method
func (e *EventLogProducerFacadeMockProduceEventExpectation) Then(err error) *EventLogProducerFacadeMock {
	e.results = &EventLogProducerFacadeMockProduceEventResults{err}
	return e.mock
}

// Times sets number of times EventLogProducerFacade.ProduceEvent should be invoked
func (mmProduceEvent *mEventLogProducerFacadeMockProduceEvent) Times(n uint64) *mEventLogProducerFacadeMockProduceEvent {
	if n == 0 {
		mmProduceEvent.mock.t.Fatalf("Times of EventLogProducerFacadeMock.ProduceEvent mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmProduceEvent.expectedInvocations, n)
	mmProduceEvent.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmProduceEvent
}

func (mmProduceEvent *mEventLogProducerFacadeMockProduceEvent) invocationsDone() bool {
	if len(mmProduceEvent.expectations) == 0 && mmProduceEvent.defaultExpectation == nil && mmProduceEvent.mock.funcProduceEvent == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmProduceEvent.mock.afterProduceEventCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmProduceEvent.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// ProduceEvent implements mm_usecase.EventLogProducerFacade
func (mmProduceEvent *EventLogProducerFacadeMock) ProduceEvent(order dto.OrderDTO, eventType event.EventType) (err error) {
	mm_atomic.AddUint64(&mmProduceEvent.beforeProduceEventCounter, 1)
	defer mm_atomic.AddUint64(&mmProduceEvent.afterProduceEventCounter, 1)

	mmProduceEvent.t.Helper()

	if mmProduceEvent.inspectFuncProduceEvent != nil {
		mmProduceEvent.inspectFuncProduceEvent(order, eventType)
	}

	mm_params := EventLogProducerFacadeMockProduceEventParams{order, eventType}

	// Record call args
	mmProduceEvent.ProduceEventMock.mutex.Lock()
	mmProduceEvent.ProduceEventMock.callArgs = append(mmProduceEvent.ProduceEventMock.callArgs, &mm_params)
	mmProduceEvent.ProduceEventMock.mutex.Unlock()

	for _, e := range mmProduceEvent.ProduceEventMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmProduceEvent.ProduceEventMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmProduceEvent.ProduceEventMock.defaultExpectation.Counter, 1)
		mm_want := mmProduceEvent.ProduceEventMock.defaultExpectation.params
		mm_want_ptrs := mmProduceEvent.ProduceEventMock.defaultExpectation.paramPtrs

		mm_got := EventLogProducerFacadeMockProduceEventParams{order, eventType}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.order != nil && !minimock.Equal(*mm_want_ptrs.order, mm_got.order) {
				mmProduceEvent.t.Errorf("EventLogProducerFacadeMock.ProduceEvent got unexpected parameter order, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmProduceEvent.ProduceEventMock.defaultExpectation.expectationOrigins.originOrder, *mm_want_ptrs.order, mm_got.order, minimock.Diff(*mm_want_ptrs.order, mm_got.order))
			}

			if mm_want_ptrs.eventType != nil && !minimock.Equal(*mm_want_ptrs.eventType, mm_got.eventType) {
				mmProduceEvent.t.Errorf("EventLogProducerFacadeMock.ProduceEvent got unexpected parameter eventType, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmProduceEvent.ProduceEventMock.defaultExpectation.expectationOrigins.originEventType, *mm_want_ptrs.eventType, mm_got.eventType, minimock.Diff(*mm_want_ptrs.eventType, mm_got.eventType))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmProduceEvent.t.Errorf("EventLogProducerFacadeMock.ProduceEvent got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmProduceEvent.ProduceEventMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmProduceEvent.ProduceEventMock.defaultExpectation.results
		if mm_results == nil {
			mmProduceEvent.t.Fatal("No results are set for the EventLogProducerFacadeMock.ProduceEvent")
		}
		return (*mm_results).err
	}
	if mmProduceEvent.funcProduceEvent != nil {
		return mmProduceEvent.funcProduceEvent(order, eventType)
	}
	mmProduceEvent.t.Fatalf("Unexpected call to EventLogProducerFacadeMock.ProduceEvent. %v %v", order, eventType)
	return
}

// ProduceEventAfterCounter returns a count of finished EventLogProducerFacadeMock.ProduceEvent invocations
func (mmProduceEvent *EventLogProducerFacadeMock) ProduceEventAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmProduceEvent.afterProduceEventCounter)
}

// ProduceEventBeforeCounter returns a count of EventLogProducerFacadeMock.ProduceEvent invocations
func (mmProduceEvent *EventLogProducerFacadeMock) ProduceEventBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmProduceEvent.beforeProduceEventCounter)
}

// Calls returns a list of arguments used in each call to EventLogProducerFacadeMock.ProduceEvent.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmProduceEvent *mEventLogProducerFacadeMockProduceEvent) Calls() []*EventLogProducerFacadeMockProduceEventParams {
	mmProduceEvent.mutex.RLock()

	argCopy := make([]*EventLogProducerFacadeMockProduceEventParams, len(mmProduceEvent.callArgs))
	copy(argCopy, mmProduceEvent.callArgs)

	mmProduceEvent.mutex.RUnlock()

	return argCopy
}

// MinimockProduceEventDone returns true if the count of the ProduceEvent invocations corresponds
// the number of defined expectations
func (m *EventLogProducerFacadeMock) MinimockProduceEventDone() bool {
	if m.ProduceEventMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ProduceEventMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ProduceEventMock.invocationsDone()
}

// MinimockProduceEventInspect logs each unmet expectation
func (m *EventLogProducerFacadeMock) MinimockProduceEventInspect() {
	for _, e := range m.ProduceEventMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to EventLogProducerFacadeMock.ProduceEvent at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterProduceEventCounter := mm_atomic.LoadUint64(&m.afterProduceEventCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ProduceEventMock.defaultExpectation != nil && afterProduceEventCounter < 1 {
		if m.ProduceEventMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to EventLogProducerFacadeMock.ProduceEvent at\n%s", m.ProduceEventMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to EventLogProducerFacadeMock.ProduceEvent at\n%s with params: %#v", m.ProduceEventMock.defaultExpectation.expectationOrigins.origin, *m.ProduceEventMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcProduceEvent != nil && afterProduceEventCounter < 1 {
		m.t.Errorf("Expected call to EventLogProducerFacadeMock.ProduceEvent at\n%s", m.funcProduceEventOrigin)
	}

	if !m.ProduceEventMock.invocationsDone() && afterProduceEventCounter > 0 {
		m.t.Errorf("Expected %d calls to EventLogProducerFacadeMock.ProduceEvent at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.ProduceEventMock.expectedInvocations), m.ProduceEventMock.expectedInvocationsOrigin, afterProduceEventCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *EventLogProducerFacadeMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockProduceEventInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *EventLogProducerFacadeMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *EventLogProducerFacadeMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockProduceEventDone()
}
