// Code generated by http://github.com/gojuno/minimock (v3.4.0). DO NOT EDIT.

package mock

//go:generate minimock -i gitlab.ozon.dev/marchenkosasha2/homework/internal/usecase.OrderCacheFacade -o order_cache_facade_mock.go -n OrderCacheFacadeMock -p mock

import (
	"sync"
	mm_atomic "sync/atomic"
	"time"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"gitlab.ozon.dev/marchenkosasha2/homework/internal/dto"
)

// OrderCacheFacadeMock implements mm_usecase.OrderCacheFacade
type OrderCacheFacadeMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcGet          func(orderID int64) (op1 *dto.OrderDTO, b1 bool)
	funcGetOrigin    string
	inspectFuncGet   func(orderID int64)
	afterGetCounter  uint64
	beforeGetCounter uint64
	GetMock          mOrderCacheFacadeMockGet

	funcSet          func(orderDTO *dto.OrderDTO, now time.Time) (err error)
	funcSetOrigin    string
	inspectFuncSet   func(orderDTO *dto.OrderDTO, now time.Time)
	afterSetCounter  uint64
	beforeSetCounter uint64
	SetMock          mOrderCacheFacadeMockSet
}

// NewOrderCacheFacadeMock returns a mock for mm_usecase.OrderCacheFacade
func NewOrderCacheFacadeMock(t minimock.Tester) *OrderCacheFacadeMock {
	m := &OrderCacheFacadeMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetMock = mOrderCacheFacadeMockGet{mock: m}
	m.GetMock.callArgs = []*OrderCacheFacadeMockGetParams{}

	m.SetMock = mOrderCacheFacadeMockSet{mock: m}
	m.SetMock.callArgs = []*OrderCacheFacadeMockSetParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mOrderCacheFacadeMockGet struct {
	optional           bool
	mock               *OrderCacheFacadeMock
	defaultExpectation *OrderCacheFacadeMockGetExpectation
	expectations       []*OrderCacheFacadeMockGetExpectation

	callArgs []*OrderCacheFacadeMockGetParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// OrderCacheFacadeMockGetExpectation specifies expectation struct of the OrderCacheFacade.Get
type OrderCacheFacadeMockGetExpectation struct {
	mock               *OrderCacheFacadeMock
	params             *OrderCacheFacadeMockGetParams
	paramPtrs          *OrderCacheFacadeMockGetParamPtrs
	expectationOrigins OrderCacheFacadeMockGetExpectationOrigins
	results            *OrderCacheFacadeMockGetResults
	returnOrigin       string
	Counter            uint64
}

// OrderCacheFacadeMockGetParams contains parameters of the OrderCacheFacade.Get
type OrderCacheFacadeMockGetParams struct {
	orderID int64
}

// OrderCacheFacadeMockGetParamPtrs contains pointers to parameters of the OrderCacheFacade.Get
type OrderCacheFacadeMockGetParamPtrs struct {
	orderID *int64
}

// OrderCacheFacadeMockGetResults contains results of the OrderCacheFacade.Get
type OrderCacheFacadeMockGetResults struct {
	op1 *dto.OrderDTO
	b1  bool
}

// OrderCacheFacadeMockGetOrigins contains origins of expectations of the OrderCacheFacade.Get
type OrderCacheFacadeMockGetExpectationOrigins struct {
	origin        string
	originOrderID string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGet *mOrderCacheFacadeMockGet) Optional() *mOrderCacheFacadeMockGet {
	mmGet.optional = true
	return mmGet
}

// Expect sets up expected params for OrderCacheFacade.Get
func (mmGet *mOrderCacheFacadeMockGet) Expect(orderID int64) *mOrderCacheFacadeMockGet {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("OrderCacheFacadeMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &OrderCacheFacadeMockGetExpectation{}
	}

	if mmGet.defaultExpectation.paramPtrs != nil {
		mmGet.mock.t.Fatalf("OrderCacheFacadeMock.Get mock is already set by ExpectParams functions")
	}

	mmGet.defaultExpectation.params = &OrderCacheFacadeMockGetParams{orderID}
	mmGet.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGet.expectations {
		if minimock.Equal(e.params, mmGet.defaultExpectation.params) {
			mmGet.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGet.defaultExpectation.params)
		}
	}

	return mmGet
}

// ExpectOrderIDParam1 sets up expected param orderID for OrderCacheFacade.Get
func (mmGet *mOrderCacheFacadeMockGet) ExpectOrderIDParam1(orderID int64) *mOrderCacheFacadeMockGet {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("OrderCacheFacadeMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &OrderCacheFacadeMockGetExpectation{}
	}

	if mmGet.defaultExpectation.params != nil {
		mmGet.mock.t.Fatalf("OrderCacheFacadeMock.Get mock is already set by Expect")
	}

	if mmGet.defaultExpectation.paramPtrs == nil {
		mmGet.defaultExpectation.paramPtrs = &OrderCacheFacadeMockGetParamPtrs{}
	}
	mmGet.defaultExpectation.paramPtrs.orderID = &orderID
	mmGet.defaultExpectation.expectationOrigins.originOrderID = minimock.CallerInfo(1)

	return mmGet
}

// Inspect accepts an inspector function that has same arguments as the OrderCacheFacade.Get
func (mmGet *mOrderCacheFacadeMockGet) Inspect(f func(orderID int64)) *mOrderCacheFacadeMockGet {
	if mmGet.mock.inspectFuncGet != nil {
		mmGet.mock.t.Fatalf("Inspect function is already set for OrderCacheFacadeMock.Get")
	}

	mmGet.mock.inspectFuncGet = f

	return mmGet
}

// Return sets up results that will be returned by OrderCacheFacade.Get
func (mmGet *mOrderCacheFacadeMockGet) Return(op1 *dto.OrderDTO, b1 bool) *OrderCacheFacadeMock {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("OrderCacheFacadeMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &OrderCacheFacadeMockGetExpectation{mock: mmGet.mock}
	}
	mmGet.defaultExpectation.results = &OrderCacheFacadeMockGetResults{op1, b1}
	mmGet.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGet.mock
}

// Set uses given function f to mock the OrderCacheFacade.Get method
func (mmGet *mOrderCacheFacadeMockGet) Set(f func(orderID int64) (op1 *dto.OrderDTO, b1 bool)) *OrderCacheFacadeMock {
	if mmGet.defaultExpectation != nil {
		mmGet.mock.t.Fatalf("Default expectation is already set for the OrderCacheFacade.Get method")
	}

	if len(mmGet.expectations) > 0 {
		mmGet.mock.t.Fatalf("Some expectations are already set for the OrderCacheFacade.Get method")
	}

	mmGet.mock.funcGet = f
	mmGet.mock.funcGetOrigin = minimock.CallerInfo(1)
	return mmGet.mock
}

// When sets expectation for the OrderCacheFacade.Get which will trigger the result defined by the following
// Then helper
func (mmGet *mOrderCacheFacadeMockGet) When(orderID int64) *OrderCacheFacadeMockGetExpectation {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("OrderCacheFacadeMock.Get mock is already set by Set")
	}

	expectation := &OrderCacheFacadeMockGetExpectation{
		mock:               mmGet.mock,
		params:             &OrderCacheFacadeMockGetParams{orderID},
		expectationOrigins: OrderCacheFacadeMockGetExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGet.expectations = append(mmGet.expectations, expectation)
	return expectation
}

// Then sets up OrderCacheFacade.Get return parameters for the expectation previously defined by the When method
func (e *OrderCacheFacadeMockGetExpectation) Then(op1 *dto.OrderDTO, b1 bool) *OrderCacheFacadeMock {
	e.results = &OrderCacheFacadeMockGetResults{op1, b1}
	return e.mock
}

// Times sets number of times OrderCacheFacade.Get should be invoked
func (mmGet *mOrderCacheFacadeMockGet) Times(n uint64) *mOrderCacheFacadeMockGet {
	if n == 0 {
		mmGet.mock.t.Fatalf("Times of OrderCacheFacadeMock.Get mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGet.expectedInvocations, n)
	mmGet.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGet
}

func (mmGet *mOrderCacheFacadeMockGet) invocationsDone() bool {
	if len(mmGet.expectations) == 0 && mmGet.defaultExpectation == nil && mmGet.mock.funcGet == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGet.mock.afterGetCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGet.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Get implements mm_usecase.OrderCacheFacade
func (mmGet *OrderCacheFacadeMock) Get(orderID int64) (op1 *dto.OrderDTO, b1 bool) {
	mm_atomic.AddUint64(&mmGet.beforeGetCounter, 1)
	defer mm_atomic.AddUint64(&mmGet.afterGetCounter, 1)

	mmGet.t.Helper()

	if mmGet.inspectFuncGet != nil {
		mmGet.inspectFuncGet(orderID)
	}

	mm_params := OrderCacheFacadeMockGetParams{orderID}

	// Record call args
	mmGet.GetMock.mutex.Lock()
	mmGet.GetMock.callArgs = append(mmGet.GetMock.callArgs, &mm_params)
	mmGet.GetMock.mutex.Unlock()

	for _, e := range mmGet.GetMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.op1, e.results.b1
		}
	}

	if mmGet.GetMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGet.GetMock.defaultExpectation.Counter, 1)
		mm_want := mmGet.GetMock.defaultExpectation.params
		mm_want_ptrs := mmGet.GetMock.defaultExpectation.paramPtrs

		mm_got := OrderCacheFacadeMockGetParams{orderID}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.orderID != nil && !minimock.Equal(*mm_want_ptrs.orderID, mm_got.orderID) {
				mmGet.t.Errorf("OrderCacheFacadeMock.Get got unexpected parameter orderID, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGet.GetMock.defaultExpectation.expectationOrigins.originOrderID, *mm_want_ptrs.orderID, mm_got.orderID, minimock.Diff(*mm_want_ptrs.orderID, mm_got.orderID))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGet.t.Errorf("OrderCacheFacadeMock.Get got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGet.GetMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGet.GetMock.defaultExpectation.results
		if mm_results == nil {
			mmGet.t.Fatal("No results are set for the OrderCacheFacadeMock.Get")
		}
		return (*mm_results).op1, (*mm_results).b1
	}
	if mmGet.funcGet != nil {
		return mmGet.funcGet(orderID)
	}
	mmGet.t.Fatalf("Unexpected call to OrderCacheFacadeMock.Get. %v", orderID)
	return
}

// GetAfterCounter returns a count of finished OrderCacheFacadeMock.Get invocations
func (mmGet *OrderCacheFacadeMock) GetAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.afterGetCounter)
}

// GetBeforeCounter returns a count of OrderCacheFacadeMock.Get invocations
func (mmGet *OrderCacheFacadeMock) GetBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.beforeGetCounter)
}

// Calls returns a list of arguments used in each call to OrderCacheFacadeMock.Get.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGet *mOrderCacheFacadeMockGet) Calls() []*OrderCacheFacadeMockGetParams {
	mmGet.mutex.RLock()

	argCopy := make([]*OrderCacheFacadeMockGetParams, len(mmGet.callArgs))
	copy(argCopy, mmGet.callArgs)

	mmGet.mutex.RUnlock()

	return argCopy
}

// MinimockGetDone returns true if the count of the Get invocations corresponds
// the number of defined expectations
func (m *OrderCacheFacadeMock) MinimockGetDone() bool {
	if m.GetMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetMock.invocationsDone()
}

// MinimockGetInspect logs each unmet expectation
func (m *OrderCacheFacadeMock) MinimockGetInspect() {
	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to OrderCacheFacadeMock.Get at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetCounter := mm_atomic.LoadUint64(&m.afterGetCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetMock.defaultExpectation != nil && afterGetCounter < 1 {
		if m.GetMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to OrderCacheFacadeMock.Get at\n%s", m.GetMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to OrderCacheFacadeMock.Get at\n%s with params: %#v", m.GetMock.defaultExpectation.expectationOrigins.origin, *m.GetMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGet != nil && afterGetCounter < 1 {
		m.t.Errorf("Expected call to OrderCacheFacadeMock.Get at\n%s", m.funcGetOrigin)
	}

	if !m.GetMock.invocationsDone() && afterGetCounter > 0 {
		m.t.Errorf("Expected %d calls to OrderCacheFacadeMock.Get at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetMock.expectedInvocations), m.GetMock.expectedInvocationsOrigin, afterGetCounter)
	}
}

type mOrderCacheFacadeMockSet struct {
	optional           bool
	mock               *OrderCacheFacadeMock
	defaultExpectation *OrderCacheFacadeMockSetExpectation
	expectations       []*OrderCacheFacadeMockSetExpectation

	callArgs []*OrderCacheFacadeMockSetParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// OrderCacheFacadeMockSetExpectation specifies expectation struct of the OrderCacheFacade.Set
type OrderCacheFacadeMockSetExpectation struct {
	mock               *OrderCacheFacadeMock
	params             *OrderCacheFacadeMockSetParams
	paramPtrs          *OrderCacheFacadeMockSetParamPtrs
	expectationOrigins OrderCacheFacadeMockSetExpectationOrigins
	results            *OrderCacheFacadeMockSetResults
	returnOrigin       string
	Counter            uint64
}

// OrderCacheFacadeMockSetParams contains parameters of the OrderCacheFacade.Set
type OrderCacheFacadeMockSetParams struct {
	orderDTO *dto.OrderDTO
	now      time.Time
}

// OrderCacheFacadeMockSetParamPtrs contains pointers to parameters of the OrderCacheFacade.Set
type OrderCacheFacadeMockSetParamPtrs struct {
	orderDTO **dto.OrderDTO
	now      *time.Time
}

// OrderCacheFacadeMockSetResults contains results of the OrderCacheFacade.Set
type OrderCacheFacadeMockSetResults struct {
	err error
}

// OrderCacheFacadeMockSetOrigins contains origins of expectations of the OrderCacheFacade.Set
type OrderCacheFacadeMockSetExpectationOrigins struct {
	origin         string
	originOrderDTO string
	originNow      string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmSet *mOrderCacheFacadeMockSet) Optional() *mOrderCacheFacadeMockSet {
	mmSet.optional = true
	return mmSet
}

// Expect sets up expected params for OrderCacheFacade.Set
func (mmSet *mOrderCacheFacadeMockSet) Expect(orderDTO *dto.OrderDTO, now time.Time) *mOrderCacheFacadeMockSet {
	if mmSet.mock.funcSet != nil {
		mmSet.mock.t.Fatalf("OrderCacheFacadeMock.Set mock is already set by Set")
	}

	if mmSet.defaultExpectation == nil {
		mmSet.defaultExpectation = &OrderCacheFacadeMockSetExpectation{}
	}

	if mmSet.defaultExpectation.paramPtrs != nil {
		mmSet.mock.t.Fatalf("OrderCacheFacadeMock.Set mock is already set by ExpectParams functions")
	}

	mmSet.defaultExpectation.params = &OrderCacheFacadeMockSetParams{orderDTO, now}
	mmSet.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmSet.expectations {
		if minimock.Equal(e.params, mmSet.defaultExpectation.params) {
			mmSet.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSet.defaultExpectation.params)
		}
	}

	return mmSet
}

// ExpectOrderDTOParam1 sets up expected param orderDTO for OrderCacheFacade.Set
func (mmSet *mOrderCacheFacadeMockSet) ExpectOrderDTOParam1(orderDTO *dto.OrderDTO) *mOrderCacheFacadeMockSet {
	if mmSet.mock.funcSet != nil {
		mmSet.mock.t.Fatalf("OrderCacheFacadeMock.Set mock is already set by Set")
	}

	if mmSet.defaultExpectation == nil {
		mmSet.defaultExpectation = &OrderCacheFacadeMockSetExpectation{}
	}

	if mmSet.defaultExpectation.params != nil {
		mmSet.mock.t.Fatalf("OrderCacheFacadeMock.Set mock is already set by Expect")
	}

	if mmSet.defaultExpectation.paramPtrs == nil {
		mmSet.defaultExpectation.paramPtrs = &OrderCacheFacadeMockSetParamPtrs{}
	}
	mmSet.defaultExpectation.paramPtrs.orderDTO = &orderDTO
	mmSet.defaultExpectation.expectationOrigins.originOrderDTO = minimock.CallerInfo(1)

	return mmSet
}

// ExpectNowParam2 sets up expected param now for OrderCacheFacade.Set
func (mmSet *mOrderCacheFacadeMockSet) ExpectNowParam2(now time.Time) *mOrderCacheFacadeMockSet {
	if mmSet.mock.funcSet != nil {
		mmSet.mock.t.Fatalf("OrderCacheFacadeMock.Set mock is already set by Set")
	}

	if mmSet.defaultExpectation == nil {
		mmSet.defaultExpectation = &OrderCacheFacadeMockSetExpectation{}
	}

	if mmSet.defaultExpectation.params != nil {
		mmSet.mock.t.Fatalf("OrderCacheFacadeMock.Set mock is already set by Expect")
	}

	if mmSet.defaultExpectation.paramPtrs == nil {
		mmSet.defaultExpectation.paramPtrs = &OrderCacheFacadeMockSetParamPtrs{}
	}
	mmSet.defaultExpectation.paramPtrs.now = &now
	mmSet.defaultExpectation.expectationOrigins.originNow = minimock.CallerInfo(1)

	return mmSet
}

// Inspect accepts an inspector function that has same arguments as the OrderCacheFacade.Set
func (mmSet *mOrderCacheFacadeMockSet) Inspect(f func(orderDTO *dto.OrderDTO, now time.Time)) *mOrderCacheFacadeMockSet {
	if mmSet.mock.inspectFuncSet != nil {
		mmSet.mock.t.Fatalf("Inspect function is already set for OrderCacheFacadeMock.Set")
	}

	mmSet.mock.inspectFuncSet = f

	return mmSet
}

// Return sets up results that will be returned by OrderCacheFacade.Set
func (mmSet *mOrderCacheFacadeMockSet) Return(err error) *OrderCacheFacadeMock {
	if mmSet.mock.funcSet != nil {
		mmSet.mock.t.Fatalf("OrderCacheFacadeMock.Set mock is already set by Set")
	}

	if mmSet.defaultExpectation == nil {
		mmSet.defaultExpectation = &OrderCacheFacadeMockSetExpectation{mock: mmSet.mock}
	}
	mmSet.defaultExpectation.results = &OrderCacheFacadeMockSetResults{err}
	mmSet.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmSet.mock
}

// Set uses given function f to mock the OrderCacheFacade.Set method
func (mmSet *mOrderCacheFacadeMockSet) Set(f func(orderDTO *dto.OrderDTO, now time.Time) (err error)) *OrderCacheFacadeMock {
	if mmSet.defaultExpectation != nil {
		mmSet.mock.t.Fatalf("Default expectation is already set for the OrderCacheFacade.Set method")
	}

	if len(mmSet.expectations) > 0 {
		mmSet.mock.t.Fatalf("Some expectations are already set for the OrderCacheFacade.Set method")
	}

	mmSet.mock.funcSet = f
	mmSet.mock.funcSetOrigin = minimock.CallerInfo(1)
	return mmSet.mock
}

// When sets expectation for the OrderCacheFacade.Set which will trigger the result defined by the following
// Then helper
func (mmSet *mOrderCacheFacadeMockSet) When(orderDTO *dto.OrderDTO, now time.Time) *OrderCacheFacadeMockSetExpectation {
	if mmSet.mock.funcSet != nil {
		mmSet.mock.t.Fatalf("OrderCacheFacadeMock.Set mock is already set by Set")
	}

	expectation := &OrderCacheFacadeMockSetExpectation{
		mock:               mmSet.mock,
		params:             &OrderCacheFacadeMockSetParams{orderDTO, now},
		expectationOrigins: OrderCacheFacadeMockSetExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmSet.expectations = append(mmSet.expectations, expectation)
	return expectation
}

// Then sets up OrderCacheFacade.Set return parameters for the expectation previously defined by the When method
func (e *OrderCacheFacadeMockSetExpectation) Then(err error) *OrderCacheFacadeMock {
	e.results = &OrderCacheFacadeMockSetResults{err}
	return e.mock
}

// Times sets number of times OrderCacheFacade.Set should be invoked
func (mmSet *mOrderCacheFacadeMockSet) Times(n uint64) *mOrderCacheFacadeMockSet {
	if n == 0 {
		mmSet.mock.t.Fatalf("Times of OrderCacheFacadeMock.Set mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmSet.expectedInvocations, n)
	mmSet.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmSet
}

func (mmSet *mOrderCacheFacadeMockSet) invocationsDone() bool {
	if len(mmSet.expectations) == 0 && mmSet.defaultExpectation == nil && mmSet.mock.funcSet == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmSet.mock.afterSetCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmSet.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Set implements mm_usecase.OrderCacheFacade
func (mmSet *OrderCacheFacadeMock) Set(orderDTO *dto.OrderDTO, now time.Time) (err error) {
	mm_atomic.AddUint64(&mmSet.beforeSetCounter, 1)
	defer mm_atomic.AddUint64(&mmSet.afterSetCounter, 1)

	mmSet.t.Helper()

	if mmSet.inspectFuncSet != nil {
		mmSet.inspectFuncSet(orderDTO, now)
	}

	mm_params := OrderCacheFacadeMockSetParams{orderDTO, now}

	// Record call args
	mmSet.SetMock.mutex.Lock()
	mmSet.SetMock.callArgs = append(mmSet.SetMock.callArgs, &mm_params)
	mmSet.SetMock.mutex.Unlock()

	for _, e := range mmSet.SetMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmSet.SetMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSet.SetMock.defaultExpectation.Counter, 1)
		mm_want := mmSet.SetMock.defaultExpectation.params
		mm_want_ptrs := mmSet.SetMock.defaultExpectation.paramPtrs

		mm_got := OrderCacheFacadeMockSetParams{orderDTO, now}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.orderDTO != nil && !minimock.Equal(*mm_want_ptrs.orderDTO, mm_got.orderDTO) {
				mmSet.t.Errorf("OrderCacheFacadeMock.Set got unexpected parameter orderDTO, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSet.SetMock.defaultExpectation.expectationOrigins.originOrderDTO, *mm_want_ptrs.orderDTO, mm_got.orderDTO, minimock.Diff(*mm_want_ptrs.orderDTO, mm_got.orderDTO))
			}

			if mm_want_ptrs.now != nil && !minimock.Equal(*mm_want_ptrs.now, mm_got.now) {
				mmSet.t.Errorf("OrderCacheFacadeMock.Set got unexpected parameter now, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSet.SetMock.defaultExpectation.expectationOrigins.originNow, *mm_want_ptrs.now, mm_got.now, minimock.Diff(*mm_want_ptrs.now, mm_got.now))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSet.t.Errorf("OrderCacheFacadeMock.Set got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmSet.SetMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSet.SetMock.defaultExpectation.results
		if mm_results == nil {
			mmSet.t.Fatal("No results are set for the OrderCacheFacadeMock.Set")
		}
		return (*mm_results).err
	}
	if mmSet.funcSet != nil {
		return mmSet.funcSet(orderDTO, now)
	}
	mmSet.t.Fatalf("Unexpected call to OrderCacheFacadeMock.Set. %v %v", orderDTO, now)
	return
}

// SetAfterCounter returns a count of finished OrderCacheFacadeMock.Set invocations
func (mmSet *OrderCacheFacadeMock) SetAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSet.afterSetCounter)
}

// SetBeforeCounter returns a count of OrderCacheFacadeMock.Set invocations
func (mmSet *OrderCacheFacadeMock) SetBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSet.beforeSetCounter)
}

// Calls returns a list of arguments used in each call to OrderCacheFacadeMock.Set.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSet *mOrderCacheFacadeMockSet) Calls() []*OrderCacheFacadeMockSetParams {
	mmSet.mutex.RLock()

	argCopy := make([]*OrderCacheFacadeMockSetParams, len(mmSet.callArgs))
	copy(argCopy, mmSet.callArgs)

	mmSet.mutex.RUnlock()

	return argCopy
}

// MinimockSetDone returns true if the count of the Set invocations corresponds
// the number of defined expectations
func (m *OrderCacheFacadeMock) MinimockSetDone() bool {
	if m.SetMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.SetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.SetMock.invocationsDone()
}

// MinimockSetInspect logs each unmet expectation
func (m *OrderCacheFacadeMock) MinimockSetInspect() {
	for _, e := range m.SetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to OrderCacheFacadeMock.Set at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterSetCounter := mm_atomic.LoadUint64(&m.afterSetCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.SetMock.defaultExpectation != nil && afterSetCounter < 1 {
		if m.SetMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to OrderCacheFacadeMock.Set at\n%s", m.SetMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to OrderCacheFacadeMock.Set at\n%s with params: %#v", m.SetMock.defaultExpectation.expectationOrigins.origin, *m.SetMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSet != nil && afterSetCounter < 1 {
		m.t.Errorf("Expected call to OrderCacheFacadeMock.Set at\n%s", m.funcSetOrigin)
	}

	if !m.SetMock.invocationsDone() && afterSetCounter > 0 {
		m.t.Errorf("Expected %d calls to OrderCacheFacadeMock.Set at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.SetMock.expectedInvocations), m.SetMock.expectedInvocationsOrigin, afterSetCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *OrderCacheFacadeMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockGetInspect()

			m.MinimockSetInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *OrderCacheFacadeMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *OrderCacheFacadeMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetDone() &&
		m.MinimockSetDone()
}
