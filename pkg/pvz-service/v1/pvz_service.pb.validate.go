// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pvz-service/v1/pvz_service.proto

package pvz_service

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Order with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Order) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Order with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in OrderMultiError, or nil if none found.
func (m *Order) ValidateAll() error {
	return m.validate(true)
}

func (m *Order) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ClientId

	if all {
		switch v := interface{}(m.GetStoreUntil()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "StoreUntil",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "StoreUntil",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStoreUntil()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderValidationError{
				field:  "StoreUntil",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	// no validation rules for Cost

	// no validation rules for Weight

	if all {
		switch v := interface{}(m.GetPickUpTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "PickUpTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "PickUpTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPickUpTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderValidationError{
				field:  "PickUpTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OrderMultiError(errors)
	}

	return nil
}

// OrderMultiError is an error wrapping multiple validation errors returned by
// Order.ValidateAll() if the designated constraints aren't met.
type OrderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderMultiError) AllErrors() []error { return m }

// OrderValidationError is the validation error returned by Order.Validate if
// the designated constraints aren't met.
type OrderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderValidationError) ErrorName() string { return "OrderValidationError" }

// Error satisfies the builtin error interface
func (e OrderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrder.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderValidationError{}

// Validate checks the field values on ReceiveCourierRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReceiveCourierRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReceiveCourierRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReceiveCourierRequestMultiError, or nil if none found.
func (m *ReceiveCourierRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReceiveCourierRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOrderId() <= 0 {
		err := ReceiveCourierRequestValidationError{
			field:  "OrderId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetClientId() <= 0 {
		err := ReceiveCourierRequestValidationError{
			field:  "ClientId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetStoreUntil()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReceiveCourierRequestValidationError{
					field:  "StoreUntil",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReceiveCourierRequestValidationError{
					field:  "StoreUntil",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStoreUntil()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReceiveCourierRequestValidationError{
				field:  "StoreUntil",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetCost() <= 0 {
		err := ReceiveCourierRequestValidationError{
			field:  "Cost",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetWeight() <= 0 {
		err := ReceiveCourierRequestValidationError{
			field:  "Weight",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ReceiveCourierRequestMultiError(errors)
	}

	return nil
}

// ReceiveCourierRequestMultiError is an error wrapping multiple validation
// errors returned by ReceiveCourierRequest.ValidateAll() if the designated
// constraints aren't met.
type ReceiveCourierRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReceiveCourierRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReceiveCourierRequestMultiError) AllErrors() []error { return m }

// ReceiveCourierRequestValidationError is the validation error returned by
// ReceiveCourierRequest.Validate if the designated constraints aren't met.
type ReceiveCourierRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReceiveCourierRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReceiveCourierRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReceiveCourierRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReceiveCourierRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReceiveCourierRequestValidationError) ErrorName() string {
	return "ReceiveCourierRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReceiveCourierRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReceiveCourierRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReceiveCourierRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReceiveCourierRequestValidationError{}

// Validate checks the field values on ReceiveCourierResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReceiveCourierResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReceiveCourierResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReceiveCourierResponseMultiError, or nil if none found.
func (m *ReceiveCourierResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReceiveCourierResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ReceiveCourierResponseMultiError(errors)
	}

	return nil
}

// ReceiveCourierResponseMultiError is an error wrapping multiple validation
// errors returned by ReceiveCourierResponse.ValidateAll() if the designated
// constraints aren't met.
type ReceiveCourierResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReceiveCourierResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReceiveCourierResponseMultiError) AllErrors() []error { return m }

// ReceiveCourierResponseValidationError is the validation error returned by
// ReceiveCourierResponse.Validate if the designated constraints aren't met.
type ReceiveCourierResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReceiveCourierResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReceiveCourierResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReceiveCourierResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReceiveCourierResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReceiveCourierResponseValidationError) ErrorName() string {
	return "ReceiveCourierResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReceiveCourierResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReceiveCourierResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReceiveCourierResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReceiveCourierResponseValidationError{}

// Validate checks the field values on ReturnCourierRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReturnCourierRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReturnCourierRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReturnCourierRequestMultiError, or nil if none found.
func (m *ReturnCourierRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReturnCourierRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOrderId() <= 0 {
		err := ReturnCourierRequestValidationError{
			field:  "OrderId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ReturnCourierRequestMultiError(errors)
	}

	return nil
}

// ReturnCourierRequestMultiError is an error wrapping multiple validation
// errors returned by ReturnCourierRequest.ValidateAll() if the designated
// constraints aren't met.
type ReturnCourierRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReturnCourierRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReturnCourierRequestMultiError) AllErrors() []error { return m }

// ReturnCourierRequestValidationError is the validation error returned by
// ReturnCourierRequest.Validate if the designated constraints aren't met.
type ReturnCourierRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReturnCourierRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReturnCourierRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReturnCourierRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReturnCourierRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReturnCourierRequestValidationError) ErrorName() string {
	return "ReturnCourierRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReturnCourierRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReturnCourierRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReturnCourierRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReturnCourierRequestValidationError{}

// Validate checks the field values on ReturnCourierResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReturnCourierResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReturnCourierResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReturnCourierResponseMultiError, or nil if none found.
func (m *ReturnCourierResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReturnCourierResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ReturnCourierResponseMultiError(errors)
	}

	return nil
}

// ReturnCourierResponseMultiError is an error wrapping multiple validation
// errors returned by ReturnCourierResponse.ValidateAll() if the designated
// constraints aren't met.
type ReturnCourierResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReturnCourierResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReturnCourierResponseMultiError) AllErrors() []error { return m }

// ReturnCourierResponseValidationError is the validation error returned by
// ReturnCourierResponse.Validate if the designated constraints aren't met.
type ReturnCourierResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReturnCourierResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReturnCourierResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReturnCourierResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReturnCourierResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReturnCourierResponseValidationError) ErrorName() string {
	return "ReturnCourierResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReturnCourierResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReturnCourierResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReturnCourierResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReturnCourierResponseValidationError{}

// Validate checks the field values on GiveOutClientRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GiveOutClientRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GiveOutClientRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GiveOutClientRequestMultiError, or nil if none found.
func (m *GiveOutClientRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GiveOutClientRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetOrdersIds()) < 1 {
		err := GiveOutClientRequestValidationError{
			field:  "OrdersIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_GiveOutClientRequest_OrdersIds_Unique := make(map[int64]struct{}, len(m.GetOrdersIds()))

	for idx, item := range m.GetOrdersIds() {
		_, _ = idx, item

		if _, exists := _GiveOutClientRequest_OrdersIds_Unique[item]; exists {
			err := GiveOutClientRequestValidationError{
				field:  fmt.Sprintf("OrdersIds[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_GiveOutClientRequest_OrdersIds_Unique[item] = struct{}{}
		}

		// no validation rules for OrdersIds[idx]
	}

	if len(errors) > 0 {
		return GiveOutClientRequestMultiError(errors)
	}

	return nil
}

// GiveOutClientRequestMultiError is an error wrapping multiple validation
// errors returned by GiveOutClientRequest.ValidateAll() if the designated
// constraints aren't met.
type GiveOutClientRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GiveOutClientRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GiveOutClientRequestMultiError) AllErrors() []error { return m }

// GiveOutClientRequestValidationError is the validation error returned by
// GiveOutClientRequest.Validate if the designated constraints aren't met.
type GiveOutClientRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GiveOutClientRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GiveOutClientRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GiveOutClientRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GiveOutClientRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GiveOutClientRequestValidationError) ErrorName() string {
	return "GiveOutClientRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GiveOutClientRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGiveOutClientRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GiveOutClientRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GiveOutClientRequestValidationError{}

// Validate checks the field values on GiveOutClientResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GiveOutClientResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GiveOutClientResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GiveOutClientResponseMultiError, or nil if none found.
func (m *GiveOutClientResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GiveOutClientResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GiveOutClientResponseMultiError(errors)
	}

	return nil
}

// GiveOutClientResponseMultiError is an error wrapping multiple validation
// errors returned by GiveOutClientResponse.ValidateAll() if the designated
// constraints aren't met.
type GiveOutClientResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GiveOutClientResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GiveOutClientResponseMultiError) AllErrors() []error { return m }

// GiveOutClientResponseValidationError is the validation error returned by
// GiveOutClientResponse.Validate if the designated constraints aren't met.
type GiveOutClientResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GiveOutClientResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GiveOutClientResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GiveOutClientResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GiveOutClientResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GiveOutClientResponseValidationError) ErrorName() string {
	return "GiveOutClientResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GiveOutClientResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGiveOutClientResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GiveOutClientResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GiveOutClientResponseValidationError{}

// Validate checks the field values on RefundClientRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RefundClientRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefundClientRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefundClientRequestMultiError, or nil if none found.
func (m *RefundClientRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RefundClientRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOrderId() <= 0 {
		err := RefundClientRequestValidationError{
			field:  "OrderId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetClientId() <= 0 {
		err := RefundClientRequestValidationError{
			field:  "ClientId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RefundClientRequestMultiError(errors)
	}

	return nil
}

// RefundClientRequestMultiError is an error wrapping multiple validation
// errors returned by RefundClientRequest.ValidateAll() if the designated
// constraints aren't met.
type RefundClientRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefundClientRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefundClientRequestMultiError) AllErrors() []error { return m }

// RefundClientRequestValidationError is the validation error returned by
// RefundClientRequest.Validate if the designated constraints aren't met.
type RefundClientRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefundClientRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefundClientRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefundClientRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefundClientRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefundClientRequestValidationError) ErrorName() string {
	return "RefundClientRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RefundClientRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefundClientRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefundClientRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefundClientRequestValidationError{}

// Validate checks the field values on RefundClientResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RefundClientResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefundClientResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefundClientResponseMultiError, or nil if none found.
func (m *RefundClientResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RefundClientResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RefundClientResponseMultiError(errors)
	}

	return nil
}

// RefundClientResponseMultiError is an error wrapping multiple validation
// errors returned by RefundClientResponse.ValidateAll() if the designated
// constraints aren't met.
type RefundClientResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefundClientResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefundClientResponseMultiError) AllErrors() []error { return m }

// RefundClientResponseValidationError is the validation error returned by
// RefundClientResponse.Validate if the designated constraints aren't met.
type RefundClientResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefundClientResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefundClientResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefundClientResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefundClientResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefundClientResponseValidationError) ErrorName() string {
	return "RefundClientResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RefundClientResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefundClientResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefundClientResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefundClientResponseValidationError{}

// Validate checks the field values on OrderListRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OrderListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrderListRequestMultiError, or nil if none found.
func (m *OrderListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetClientId() <= 0 {
		err := OrderListRequestValidationError{
			field:  "ClientId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOffset() <= -1 {
		err := OrderListRequestValidationError{
			field:  "Offset",
			reason: "value must be greater than -1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Limit != nil {

		if m.GetLimit() <= -1 {
			err := OrderListRequestValidationError{
				field:  "Limit",
				reason: "value must be greater than -1",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return OrderListRequestMultiError(errors)
	}

	return nil
}

// OrderListRequestMultiError is an error wrapping multiple validation errors
// returned by OrderListRequest.ValidateAll() if the designated constraints
// aren't met.
type OrderListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderListRequestMultiError) AllErrors() []error { return m }

// OrderListRequestValidationError is the validation error returned by
// OrderListRequest.Validate if the designated constraints aren't met.
type OrderListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderListRequestValidationError) ErrorName() string { return "OrderListRequestValidationError" }

// Error satisfies the builtin error interface
func (e OrderListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderListRequestValidationError{}

// Validate checks the field values on OrderListResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OrderListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrderListResponseMultiError, or nil if none found.
func (m *OrderListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOrders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OrderListResponseValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OrderListResponseValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OrderListResponseValidationError{
					field:  fmt.Sprintf("Orders[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return OrderListResponseMultiError(errors)
	}

	return nil
}

// OrderListResponseMultiError is an error wrapping multiple validation errors
// returned by OrderListResponse.ValidateAll() if the designated constraints
// aren't met.
type OrderListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderListResponseMultiError) AllErrors() []error { return m }

// OrderListResponseValidationError is the validation error returned by
// OrderListResponse.Validate if the designated constraints aren't met.
type OrderListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderListResponseValidationError) ErrorName() string {
	return "OrderListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e OrderListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderListResponseValidationError{}

// Validate checks the field values on RefundListRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RefundListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefundListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefundListRequestMultiError, or nil if none found.
func (m *RefundListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RefundListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Limit != nil {

		if m.GetLimit() <= -1 {
			err := RefundListRequestValidationError{
				field:  "Limit",
				reason: "value must be greater than -1",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Offset != nil {

		if m.GetOffset() <= -1 {
			err := RefundListRequestValidationError{
				field:  "Offset",
				reason: "value must be greater than -1",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return RefundListRequestMultiError(errors)
	}

	return nil
}

// RefundListRequestMultiError is an error wrapping multiple validation errors
// returned by RefundListRequest.ValidateAll() if the designated constraints
// aren't met.
type RefundListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefundListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefundListRequestMultiError) AllErrors() []error { return m }

// RefundListRequestValidationError is the validation error returned by
// RefundListRequest.Validate if the designated constraints aren't met.
type RefundListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefundListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefundListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefundListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefundListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefundListRequestValidationError) ErrorName() string {
	return "RefundListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RefundListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefundListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefundListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefundListRequestValidationError{}

// Validate checks the field values on RefundListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RefundListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefundListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefundListResponseMultiError, or nil if none found.
func (m *RefundListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RefundListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOrders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RefundListResponseValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RefundListResponseValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RefundListResponseValidationError{
					field:  fmt.Sprintf("Orders[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RefundListResponseMultiError(errors)
	}

	return nil
}

// RefundListResponseMultiError is an error wrapping multiple validation errors
// returned by RefundListResponse.ValidateAll() if the designated constraints
// aren't met.
type RefundListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefundListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefundListResponseMultiError) AllErrors() []error { return m }

// RefundListResponseValidationError is the validation error returned by
// RefundListResponse.Validate if the designated constraints aren't met.
type RefundListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefundListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefundListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefundListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefundListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefundListResponseValidationError) ErrorName() string {
	return "RefundListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RefundListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefundListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefundListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefundListResponseValidationError{}
